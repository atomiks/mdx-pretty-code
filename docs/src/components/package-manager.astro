---
import {
  type RawTheme,
  createHighlighter,
  createJavaScriptRegexEngine,
} from 'shiki';
import type { ComponentProps } from 'astro/types';
import { Tabs, TabItem } from '@astrojs/starlight/components';
import type { NoRepetition } from '../lib/utilities/types.ts';
import { transformerCopyButton } from '@rehype-pretty/transformers';
import moonlightTheme from '../../public/theme/moonlight-ii.json' with {
  type: 'json',
};

const packageManager = ['pnpm', 'bun', 'npm', 'yarn', 'jsr', 'ni'] as const;
type PackageManager = (typeof packageManager)[number];

type TabItemProps = ComponentProps<typeof TabItem>;

interface Props {
  dev?: boolean;
  packageId: string;
  packageManagers: NoRepetition<PackageManager>;
  type?: 'add' | 'create' | 'exec' | 'run' | 'remove';
}

const {
  dev,
  packageId,
  type = 'add',
  // @ts-expect-error
  packageManagers = packageManager,
} = Astro.props;

const javascriptEngine = createJavaScriptRegexEngine();
const shiki = await createHighlighter({
  langs: ['sh'],
  engine: javascriptEngine,
  themes: [moonlightTheme as unknown as RawTheme],
});
const managers = [
  {
    name: 'bun',
    icon: 'bun',
    code: shiki.codeToHtml(`bun add ${packageId}`, {
      lang: 'sh',
      theme: moonlightTheme as unknown as RawTheme,

      transformers: [
        transformerCopyButton({
          visibility: 'always',
          feedbackDuration: 3_000,
        }),
      ],
    }),
  },
  {
    name: 'pnpm',
    icon: 'pnpm',
    code: shiki.codeToHtml(`pnpm add ${packageId}`, {
      lang: 'sh',
      theme: moonlightTheme as unknown as RawTheme,
      transformers: [
        transformerCopyButton({
          visibility: 'always',
          feedbackDuration: 3_000,
        }),
      ],
    }),
  },
  {
    name: 'npm',
    icon: 'seti:npm',
    code: shiki.codeToHtml(`npm install ${packageId}`, {
      lang: 'sh',
      theme: moonlightTheme as unknown as RawTheme,
      transformers: [
        transformerCopyButton({
          visibility: 'always',
          feedbackDuration: 3_000,
        }),
      ],
    }),
  },
  {
    name: 'yarn',
    icon: 'seti:yarn',
    code: shiki.codeToHtml(`yarn add ${packageId}`, {
      lang: 'sh',
      theme: moonlightTheme as unknown as RawTheme,
      transformers: [
        transformerCopyButton({
          visibility: 'always',
          feedbackDuration: 3_000,
        }),
      ],
    }),
  },
  {
    name: 'jsr',
    icon: 'seti:shell',
    code: shiki.codeToHtml(`npx jsr add ${packageId}`, {
      lang: 'sh',
      theme: moonlightTheme as unknown as RawTheme,
      transformers: [
        transformerCopyButton({
          visibility: 'always',
          feedbackDuration: 3_000,
        }),
      ],
    }),
  },
] satisfies Array<{
  code: string;
  name: PackageManager;
  icon: TabItemProps['icon'];
}>;
---

<Tabs syncKey="pkg">
  {
    managers.map(manager => (
      <TabItem label={manager.name} icon={manager.icon}>
        <div set:html={manager.code} data-package-manager-code="" />
      </TabItem>
    ))
  }
</Tabs>

<style is:global>
  div[data-package-manager-code] pre code {
    margin-left: 1rem;
  }
</style>
